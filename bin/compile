#!/usr/bin/env bash

####### Configure environment

set -o errexit    # always exit on error
set -o errtrace   # trap errors in functions as well
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku
mkdir -p $heroku_dir/node
warnings=$(mktemp)

# Load dependencies
source $bp_dir/lib/common.sh
source $bp_dir/lib/build.sh
source $bp_dir/lib/warnings.sh

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

# Provide hook to deal with errors
trap build_failed ERR

####### Determine current state

head "Reading application state"
read_current_state
show_current_state

if [ "$iojs_engine" == "" ]; then
  warn_node_engine "$node_engine"
else
  warn_node_engine "$iojs_engine"
fi
warn_node_modules "$modules_source"

####### Vendor in binaries

head "Installing binaries"
if [ "$iojs_engine" == "" ]; then
  install_node "$node_engine"
else
  install_iojs "$iojs_engine"
fi
install_npm

####### Build the project's dependencies

head "Building dependencies"
cd $build_dir
build_dependencies

####### Create a Procfile if possible

head "Checking startup method"
ensure_procfile "$start_method" "$build_dir"
warn_start "$start_method"

####### Install Compass
head "Installing Compass"
if [ "$STACK" == "cedar-14" ]; then
  export GEM_HOME=$cache_dir/ruby/.gem/ruby/2.2.0
else
  export GEM_HOME=$cache_dir/ruby/.gem/ruby/1.9.1
fi
PATH="$GEM_HOME/bin:$PATH"
if [ ! -f $GEM_HOME/bin/compass ]; then
  mkdir -p $cache_dir/ruby
  HOME="$cache_dir/ruby" gem install sass -v 3.4.13 --user-install --no-rdoc --no-ri
  HOME="$cache_dir/ruby" gem install compass --user-install --no-rdoc --no-ri
fi

####### Check and run Bower
(
  if [ -f $build_dir/bower.json ]; then
    # make sure that bower is installed locally
    npm install bower
    echo "-----> Found bower.json, running bower install"
    $build_dir/node_modules/.bin/bower install
  else
    echo "-----> No bower.json found"
  fi
)

####### Check and run Grunt
(
  if [ -f $build_dir/grunt.js ] || [ -f $build_dir/Gruntfile.js ] || [ -f $build_dir/gruntfile.js ] || [ -f $build_dir/Gruntfile.coffee ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      head "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    # make sure that grunt and grunt-cli are installed locally
    npm install grunt-cli
    npm install grunt
    echo "-----> Found Gruntfile, running grunt heroku:$NODE_ENV task"
    $build_dir/node_modules/.bin/grunt heroku:$NODE_ENV

    head "Pruning dev dependencies"
    npm prune --production 2>&1 | indent

  else
    echo "-----> No Gruntfile (grunt.js, Gruntfile.js, gruntfile.js, Gruntfile.coffee) found"
  fi
)

####### Finalize the build

head "Finalizing build"
write_profile
write_export
clean_npm
clean_cache
create_cache
build_succeeded
